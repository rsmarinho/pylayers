import numpy as np
import scipy as sp
import scipy.stats as stats
import matplotlib.pyplot as plt
from matplotlib.patches import Circle, Wedge
from matplotlib.collections import PatchCollection
import sys
import ConfigParser

###############################
# filename = le meme nom de fichier que dans compute RSS-HT

###########################

#filename='CDFcompare_wholespace'
#filename='CDFcompare_wholespace_RSSHTatteintML'
#filename='CDFcompare_randdis_5-20M'
#filename='CDFcompare_randdis_ws_5-20M'
#filename='CDFcompare_randdis_RSSHTatteintML'
#filename='CDFcompare_randdis_ws_RSSHTatteintML'
#filename='CDFcompare_randdis_5-100M'
#filename='CDFcompare_randdis_ws_5-100M'
#filename='CDFcompare_randdis_20-80M'
#filename='CDFcompare_randdis_ws_20-80Mtoto'
#filename='CDFcompare_randdis_ws_20-80Meff'
#filename='11_2011_CDFcompare_MLinitLS2'
#filename='11_2011_CDFcompare_MLinicentroid'
#filename='11_2011_CDFcompare_MLinirand'
#filename='11_2011_CDF_density_MLinicentro'
#filename='11_2011_CDF_density_MLinils'
#filename='11_2011_CDF_density_MLinils2'
#filename='11_2011_CDF_density_MLinils3'


#filename='11_2011_CDF_density_MLinils_long'
#filename='11_2011_CDF_density_MLinils_long_5'
#filename='11_2011_CDF_density_MLinils_fixed'
#filename='CDF_PL_known'
#filename='CDF_PL_known2'
#filename='CDF_PL_unknown_3'
#filename='CDF_PL_unknown_test2'
#filename='CDF_PL_unknown2_model2'
#filename='CDF_PL_known2'
#filename='PL_no_model_error_5RSS5'
#filename='PL_no_model_error_5RSS2'

#filename='CDF_PL_unknown2_3_NEW3'
#filename='CDF_3_Troals_error_10nodes_totalrand'

#lname=['Geo_RSSI_TDOA','Geo_RSSI_TOA','Geo_RSSI_TOA_TDOA','Geo_TDOA','Geo_TOA','Geo_TOA_TDOA']
lname=['_TDOA']
c=[]
for n in lname:

    L = np.load('./cdf/' +n +'/L.npy')
    leg = np.load('./cdf/' +n +'/leg.npy')
    limit = np.load('./cdf/' +n +'/bound.npy')



    lL=len(L)
    lv=[]

    MF=[400.,400.,400.,400.,400.,400.,400.,400.,400.]
    #color=['r','r','r','g','g','g','b','b','b']
    #### CDF RSSHT atteint ML
    Msize=[4,4,4]
    MS=['','s','*','o','^','*','v',' ','^','o',' ','^','o']
    MC=['w','w','w','w','w','w','w','w','w','w','w','w','w']
    LS=['-','-','-','-','-','-','-','-','-','--','--','--','-.','-.','-.',':',':',':']
    #color=['k']*lL
    color=['r','g','b']
    #leg=['ML-T for 5 RSS nodes','ML-WLS for 5 RSS nodes','RSS-HT for 5 RSS nodes']


    it=0

    ### 3-10n nodes
    #A=[0,1,6,3]
    #leg=np.array(['CRLB','ML'
    #       ,'ML-T','ML-WLS','ML-rand', 
    #       'random', 'Proposed Method'], 
    #      dtype='|S24')
    ## 8 nodes 
    ##A=[0,1,4,2]
    ##leg=np.array(['CRLB','ML'
    ##       ,'ML-WLS', 
    ##       'random', 'RSSI-HT'], 
    ##      dtype='|S24')


    for i in range(lL):
        dx1 = {}
        dx1['values'] = L[i]
        dx1['filename'] = 'CDFALL'
        dx1['bound']  = np.arange(0,min(limit,10),0.01)
        dx1['legend'] =  leg[i]
        dx1['xlabel'] = r"$ \| B - \hat{B} \| \quad [m]$"
        dx1['ylabel'] = r"$ Pr ( \| B - \hat{B} \| < \epsilon)$"
        dx1['title']  = 'CDF'
        dx1['marker']  = MS[it]
        try:
            dx1['markercolor']  = MC[it]
        except:
            pass
        dx1['markersize']  = Msize[i]
        dx1['markerfrequency']  = MF[it]
        dx1['line']  = LS[it]
        dx1['color']  = color[it]
        dx1['linewidth']  = 0.5
    #    if nb_rss[i/4]==3 :
        lv.append(dx1)
        it=it+1
    #    lv.append(dx1)
    c.append(CDF(lv,filename=n))

[cs.show() for cs in c]

### SUPPRIMER COMPARAISON A CDF ML INIT EXACT
#X=[1,2,4,5,7,8]
#color=['r','r','g','g','b','b','k','k']
#LS=['-','-','--','--','-.','-.',':',':',':']
#MS=[' ','^',' ','^',' ','^',' ','^']
#for j,i in enumerate(X):#range(lL):
#    dx1 = {}
#    dx1['values'] = L[i]
#    dx1['filename'] = 'CDFALL'
#    dx1['bound']  = np.arange(0,5.,0.01)
#    dx1['legend'] = leg[i]
#    dx1['xlabel'] = 'distance m' 
#    dx1['ylabel'] = 'CDF' 
#    dx1['title']  = 'CDF'  
#    dx1['marker']  = MS[j]
#    dx1['markersize']  = 5
#    dx1['markerfrequency']  = 100.
#    dx1['line']  = LS[j]
#    dx1['color']  = color[j]
#    dx1['linewidth']  = 1
#    lv.append(dx1)
#c  = CDF(lv,filename=filename)
#c.show()

