diff --git a/pylayers/gui/editor.py b/pylayers/gui/editor.py
index 0e8753a..78a91ce 100644
--- a/pylayers/gui/editor.py
+++ b/pylayers/gui/editor.py
@@ -22,22 +22,11 @@ import os
 import sys
 
 
-try:
-    _encoding = QApplication.UnicodeUTF8
-    def _translate(context, text, disambig):
-        return QApplication.translate(context, text, disambig, _encoding)
-except AttributeError:
-    def _translate(context, text, disambig):
-        return QApplication.translate(context, text, disambig)
-
 
-class SubSegWin(QDialog):
+class SubSegWin(QDialog):    # any super class is okay
     def __init__(self,Nss=1,zmin=0.,zmax=3.0,subsegdata={},parent=None):
         super(SubSegWin, self).__init__(parent)
         #
-        self.setModal(True) # interaction only with the current window
-
-        self.setWindowTitle('Edit Sub-Segment(s) Properties')
         self.gparent=parent.parent
         self.parent=parent
         # mulsti segment selection indicator
@@ -274,209 +263,9 @@ class SubSegWin(QDialog):
         self.close()
 
 
-class CycleSubseg(QDialog):
-
-    def __init__(self,parent=None):
-        super(CycleSubseg, self).__init__(parent)
-        self.setupUi(self)
-        self.setModal(True) # interaction only with the current window
-
-
-    def setupUi(self, Dialog):
-        Dialog.setObjectName("Dialog")
-        Dialog.resize(308, 250)
-        self.buttonBox = QDialogButtonBox(Dialog)
-        self.buttonBox.setGeometry(QRect(110, 210, 161, 32))
-        self.buttonBox.setOrientation(Qt.Horizontal)
-        self.buttonBox.setStandardButtons(QDialogButtonBox.Cancel|QDialogButtonBox.Ok)
-        self.buttonBox.setObjectName("buttonBox")
-        self.label = QLabel(Dialog)
-        self.label.setGeometry(QRect(20, 30, 31, 17))
-        self.label.setMouseTracking(False)
-        self.label.setObjectName("label")
-        self.label_2 = QLabel(Dialog)
-        self.label_2.setGeometry(QRect(20, 160, 41, 17))
-        self.label_2.setObjectName("label_2")
-        self.comboBox = QComboBox(Dialog)
-        self.comboBox.setGeometry(QRect(90, 20, 181, 27))
-        self.comboBox.setFocusPolicy(Qt.WheelFocus)
-        self.comboBox.setEditable(False)
-        self.comboBox.setObjectName("comboBox")
-        self.label_3 = QLabel(Dialog)
-        self.label_3.setGeometry(QRect(20, 100, 66, 17))
-        self.label_3.setObjectName("label_3")
-        self.comboBox_2 = QComboBox(Dialog)
-        self.comboBox_2.setGeometry(QRect(90, 160, 181, 27))
-        self.comboBox_2.setObjectName("comboBox_2")
-        self.spinBox = QSpinBox(Dialog)
-        self.spinBox.setGeometry(QRect(90, 90, 60, 27))
-        self.spinBox.setObjectName("spinBox")
-        self.edit = QPushButton(Dialog)
-        self.edit.setGeometry(QRect(170, 90, 98, 27))
-        self.edit.setObjectName("edit")
-        self.gridLayoutWidget = QWidget(Dialog)
-        self.gridLayoutWidget.setGeometry(QRect(10, 10, 271, 231))
-        self.gridLayoutWidget.setObjectName("gridLayoutWidget")
-        self.gridLayout = QGridLayout(self.gridLayoutWidget)
-        self.gridLayout.setContentsMargins(-1, 0, -1, -1)
-        self.gridLayout.setObjectName("gridLayout")
-
-        self.retranslateUi(Dialog)
-        QObject.connect(self.buttonBox, SIGNAL("accepted()"), Dialog.accept)
-        QObject.connect(self.buttonBox, SIGNAL("rejected()"), Dialog.reject)
-        QMetaObject.connectSlotsByName(Dialog)
-
-    def retranslateUi(self, Dialog):
-        # Dialog.setWindowTitle(_translate("Dialog", "Dialog", None))
-        # self.label.setText(_translate("Dialog", "Ceil", None))
-        # self.label_2.setText(_translate("Dialog", "Floor", None))
-        # self.label_3.setText(_translate("Dialog", "Sub-segs", None))
-        # self.edit.setText(_translate("Dialog", "Edit", None))
-
-        Dialog.setWindowTitle(_translate("Dialog", "Dialog", None))
-        self.label.setText(_translate("Dialog", "Not", None))
-        self.label_2.setText(_translate("Dialog", "Implemented", None))
-        self.label_3.setText(_translate("Dialog", "Yet", None))
-        self.edit.setText(_translate("Dialog", "Edit", None))
-
-
-class PropertiesCycle(QDialog):
-    """ Edit cycle properties
-    """
-    def __init__(self,Nss=0,cy=1,ss_slab=['CEIL','FLOOR'],parent=None):
-        super(PropertiesCycle, self).__init__(parent)
-        #
-        self.setWindowTitle('Edit Cycle Properties')
-        self.setModal(True) # interaction only with the current window
-
-        self.parent=parent
-        # dictionnary to pass subseg data
-        self.Nss=Nss
-        self.cy = cy
-        self.segdata=[]
-        # self._autocalc_height_val()
-        # self._init_subseg_prop()
-        self._init_layout()
-
-    def _init_layout(self):
-        vbox = QVBoxLayout()
-
-        # Indicate Ceil
-        top = QHBoxLayout()
-        ceillabel = QLabel('Ceil')
-        ceillabel.setStyleSheet("font: bold 14px;")
-
-        self.comboceil = QComboBox(self)
-        self.comboceil.setGeometry(QRect(90, 20, 181, 27))
-        self.comboceil.setObjectName("slabceil")
-        for s in self.parent.L.sl.keys():
-                self.comboceil.addItem(s)
-        idx=self.comboceil.findText(self.parent.L.Gt.node[self.cy]['ss_slab'][-1])
-        self.comboceil.setCurrentIndex(idx)
-
-
-
-        top.addWidget(ceillabel)
-        top.addWidget(self.comboceil)
-        vbox.addLayout(top)
-
-
-
-
-
-
-        middle = QHBoxLayout()
-        sseg = QLabel('Subsegs')
-        sseg.setStyleSheet("font: bold 14px;")
-
-        self.spinBox = QSpinBox(self)
-
-        self.edit = QPushButton(self)
-        self.edit.setText("Edit")
-        self.edit.clicked.connect(self.editsegments)
-
-
-
-        middle.addWidget(sseg)
-        middle.addWidget(self.spinBox )
-        middle.addWidget(self.edit)
-
-        vbox.addLayout(middle)
-
-
-        bottom =  QHBoxLayout()
-        floorlabel = QLabel('Floor')
-        floorlabel.setStyleSheet("font: bold 14px;")
-        self.combofloor = QComboBox(self)
-        self.combofloor.setGeometry(QRect(90, 20, 181, 27))
-        self.combofloor.setObjectName("slabfloor")
-        for s in self.parent.L.sl.keys():
-                self.combofloor.addItem(s)
-        idx=self.combofloor.findText(self.parent.L.Gt.node[self.cy]['ss_slab'][0])
-        self.combofloor.setCurrentIndex(idx)
-
-
-
-        bottom.addWidget(floorlabel)
-        bottom.addWidget(self.combofloor)
-        vbox.addLayout(bottom)
-
-
-
-        # validation
-        buttono=QPushButton("OK")
-        buttonc=QPushButton("Cancel")
-        buttono.clicked.connect(self.valide)
-        buttonc.clicked.connect(self.cancel)
-
-        hboxDial = QHBoxLayout()
-        hboxDial.addWidget(buttonc)
-        hboxDial.addWidget(buttono)
-
-
-
-        # create Layout
-        vbox.addLayout(hboxDial)
-
-
-
-        self.setLayout(vbox)
-
-
-    def editsegments(self):
-        # laucnh cycle sement editor 
-        # not yey implemented
-        test = CycleSubseg(parent=self)
-        test.show()
-        pass
-
-    def valide(self):
-        ceil = str(self.comboceil.currentText())
-        floor = str(self.combofloor.currentText())
-
-        lslab = []
-        lslab.append(floor)
-        if len(self.segdata) != 0:
-            print "do something to update segments"
-        lslab.append(ceil)
-
-        self.parent.selectl.L._updateGtslab(self.cy,lslab)
-
-
-        self.close()
-
-    def cancel(self):
-        self.close()
-
-
-
-
-
 class PropertiesWin(QDialog):    # any super class is okay
     def __init__(self,mulseg=False,parent=None):
         super(PropertiesWin, self).__init__(parent)
-        self.setModal(True) # interaction only with the current window
-        self.setWindowTitle('Edit Segment(s) Properties')
         # to imporve here. Probably something to inherit from parent App
         self.parent=parent
         # determine if multiple se gments are selected
@@ -563,13 +352,10 @@ class PropertiesWin(QDialog):    # any super class is okay
             self.nbsubseg.setValue(len(self.segdata['ss_name']))
         except:
             self.nbsubseg.setValue(0.)
-        self.connect(self.nbsubseg, SIGNAL('valueChanged(int)'), self.enableQpush)
-
-
 
         self.editssbutton = QPushButton("Edit Sub-Segments")
         self.editssbutton.clicked.connect(self.editsubseg)
-        self.editssbutton.setEnabled(False)
+
 
 
         self.heightmin.setMinimumWidth(5)
@@ -630,13 +416,6 @@ class PropertiesWin(QDialog):    # any super class is okay
 
         self.setLayout(vbox)
 
-    def enableQpush(self):
-        if self.nbsubseg.value() == 0:
-            self.editssbutton.setEnabled(False)
-        else:
-            self.editssbutton.setEnabled(True)
-
-
     def editsubseg(self):
         """ open a edit subseg window
         """
@@ -703,8 +482,6 @@ class PropertiesWin(QDialog):    # any super class is okay
 class SaveQuitWin(QDialog):    # any super class is okay
     def __init__(self,exit=False,parent=None):
         super(SaveQuitWin, self).__init__(parent)
-        self.setModal(True) # interaction only with the current window
-
         self.setWindowTitle('Do you want to save?')
         self.parent=parent
         self.exit=exit
@@ -759,8 +536,6 @@ class SaveQuitWin(QDialog):    # any super class is okay
 class NewLayout(QDialog):    # any super class is okay
     def __init__(self,parent=None,overlay={}):
         super(NewLayout, self).__init__(parent)
-        self.setModal(True) # interaction only with the current window
-
         self.parent=parent
         self.doverlay=overlay
         if self.doverlay == {}:
@@ -871,7 +646,6 @@ class NewLayout(QDialog):    # any super class is okay
 class Overset(QMainWindow):
     def __init__(self,parent=None):
         super(Overset, self).__init__(parent)
-        # self.setModal(True) # interaction only with the current window
         self.setWindowTitle('Set Overlay')
         self.x0=np.array([0,0])
         self.x0selected=False
@@ -1128,7 +902,6 @@ class Overset(QMainWindow):
 class GridSet(QDialog):    # any super class is okay
     def __init__(self,parent=None):
         super(GridSet, self).__init__(parent)
-        self.setModal(True) # interaction only with the current window
         self.setWindowTitle('Set Grid')
         self.parent=parent
         self._init_choices()
@@ -1234,10 +1007,10 @@ class AppForm(QMainWindow):
 
         if filename != '':
             _filename = pyu.getshort(str(filename))
-            self.L = Layout(_filename,force=True)
+            self.L = Layout(_filename)
             self.filename = self.L.filename
             self.create_main_frame()
-            # self.on_draw()
+            self.on_draw()
             self.setWindowTitle(self.L.filename + '- Pylayers : Stand Alone Editor (Beta)')
             self.resize(self.fig.canvas.width(),self.fig.canvas.height())
             print 'loaded'
@@ -1317,11 +1090,6 @@ class AppForm(QMainWindow):
             self.selectl.toggle()
             self.prop = PropertiesWin(parent=self,mulseg=True)
             self.prop.show()
-        elif (self.selectl.state == 'SC') :
-            self.propcy = PropertiesCycle(parent=self,cy=self.selectl.ncy)
-            self.propcy.show()
-
-
 
         # self.on_draw()
 
@@ -1398,7 +1166,7 @@ class AppForm(QMainWindow):
 
          F1 : Select mode
          F2 : New segment with current active Layer
-         F3 : Edit segment/cycles properties
+         F3 : Edit segment properties
 
          g : toggle grid
          ctrl+g : choose grid properties
@@ -1437,28 +1205,26 @@ class AppForm(QMainWindow):
         # self.axes.clear()
 
         # self.axes.grid(self.grid_cb.isChecked())
-        self.selectl.refresh()
-        # self.L.display['nodes']=True
-        # self.L.display['ednodes']=True
-        # self.L.display['subseg']=False
-        # self.L.display['subsegnb']=True
-        # self.L.display['ticksoff']=False
-
+        self.L.display['nodes']=True
+        self.L.display['ednodes']=True
+        self.L.display['subseg']=False
+        self.L.display['subsegnb']=True
+        self.L.display['ticksoff']=False
 
-        # self.fig,self.axes = self.selectl.show(self.fig,self.axes,clear=True)
 
-        # # self.axes.text(10,10,str(self.properties.currentText()))
+        self.fig,self.axes = self.selectl.show(self.fig,self.axes,clear=True)
+        # self.axes.text(10,10,str(self.properties.currentText()))
 
-        # # self.L.showGs(fig=self.fig,ax=self.axes)
-        # # self.axes.bar(
-        # #     left=x,
-        # #     height=self.data,
-        # #     width=self.slider.value() / 100.0,
-        # #     align='center',
-        # #     alpha=0.44,
-        # #     picker=5)
+        # self.L.showGs(fig=self.fig,ax=self.axes)
+        # self.axes.bar(
+        #     left=x,
+        #     height=self.data,
+        #     width=self.slider.value() / 100.0,
+        #     align='center',
+        #     alpha=0.44,
+        #     picker=5)
 
-        # self.fig.canvas.draw()
+        self.fig.canvas.draw()
 
     def on_release(self,event):
         string=''
@@ -1516,6 +1282,7 @@ class AppForm(QMainWindow):
             self.axes.axis(self.L.display['overlay_axis'])
         except:
             self.axes.axis(self.L.display['box'])
+
         # Bind the 'pick' event for clicking on one of the bars
         #
         # self.canvas.mpl_connect('pick_event', self.on_pick)
@@ -1602,7 +1369,7 @@ class AppForm(QMainWindow):
 
         refresh = self.create_action("&Refresh", slot=self.on_draw,
             shortcut="F10", tip="Refresh the application")
-        properties= self.create_action("&Segments/Cycles Properties", slot=self.edit_properties,
+        properties= self.create_action("&Properties", slot=self.edit_properties,
             shortcut="F3", tip="Edit Wall properties")
         # show3= self.create_action("&Properties", slot=self.edit_properties,
         #     shortcut="F9", tip="3D show")
